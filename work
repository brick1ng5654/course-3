# === 0. Полезные флаги ===
$ErrorActionPreference = 'Stop'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# === 1. Включаем TLS 1.2 (Win7/2008R2) ===
# .NET strong crypto + default TLS from OS
$dotnet = @(
 'HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319',
 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319'
)
foreach ($p in $dotnet) {
  New-Item $p -Force | Out-Null
  New-ItemProperty $p -Name 'SchUseStrongCrypto' -Type DWord -Value 1 -Force | Out-Null
  New-ItemProperty $p -Name 'SystemDefaultTlsVersions' -Type DWord -Value 1 -Force | Out-Null
}
# SChannel TLS 1.2 Client
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'DisabledByDefault' -Type DWord -Value 0 -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'Enabled' -Type DWord -Value 1 -Force | Out-Null
# WinHTTP default secure protocols (TLS1.1+1.2) — требует KB3140245
$mask = 0x00000A00
New-Item 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null
New-Item 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null

# === 2. Скачиваем корневой CA (HTTPS -> fallback на HTTP) ===
$certDir  = 'C:\CA'
$certFile = Join-Path $certDir 'rec_ca.crt'
New-Item $certDir -ItemType Directory -Force | Out-Null

try {
  Invoke-WebRequest 'https://acme-proxy.nic.etu/' -OutFile $certFile -UseBasicParsing
} catch {
  Write-Warning 'HTTPS к acme-proxy не доступен, пробую HTTP...'
  Invoke-WebRequest 'http://acme-proxy.nic.etu/'  -OutFile $certFile -UseBasicParsing
}

# === 3. Импорт в доверенные корни (Windows) ===
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).
  IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

try {
  if ($IsAdmin) {
    & certutil -addstore -f root $certFile | Out-Null
    $store = 'LocalMachine\Root'
  } else {
    & certutil -user -addstore -f root $certFile | Out-Null
    $store = 'CurrentUser\Root'
  }
  Write-Host "OK: CA установлен в $store"
} catch {
  Write-Warning "Не удалось добавить сертификат: $($_.Exception.Message)"
}


# === 4. [Опционально] Импорт в Java truststore (если используете Java-клиенты) ===
$javaExe  = (Get-Command java.exe -ErrorAction SilentlyContinue).Source
if ($javaExe) {
  $javaHome = (Split-Path (Split-Path $javaExe -Parent) -Parent)
  $cands = @("$javaHome\lib\security\cacerts","$javaHome\jre\lib\security\cacerts") | Where-Object { Test-Path $_ }
  if ($cands) {
    $cacerts = $cands[0]
    $keytool = Join-Path $javaHome 'bin\keytool.exe'
    if (-not (Test-Path $keytool)) { $keytool = Join-Path (Split-Path $javaExe -Parent) 'keytool.exe' }
    & $keytool -importcert -noprompt -trustcacerts -alias rec_ca -file $certFile -keystore $cacerts -storepass changeit
    Write-Host "OK: CA добавлен в Java truststore: $cacerts"
  }
}

# === 5. Проверка HTTPS к Jenkins ===
try {
  $r = Invoke-WebRequest 'https://jenkins2.nic.etu/jnlpJars/agent.jar' -UseBasicParsing -Method Head -TimeoutSec 20
  Write-Host "HTTPS к Jenkins OK (HTTP $($r.StatusCode))"
} catch {
  Write-Warning "Проверка HTTPS не прошла: $($_.Exception.Message)"
  Write-Warning "Если это Win7 без нужных патчей — проверь наличие KB3140245/KB4474419 и перезагрузись."
}
