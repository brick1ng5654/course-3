# === 0
$ErrorActionPreference = 'Stop'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).
  IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# === 1
$dotnet = @(
 'HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319',
 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319'
)
foreach ($p in $dotnet) {
  New-Item $p -Force | Out-Null
  New-ItemProperty $p -Name 'SchUseStrongCrypto' -Type DWord -Value 1 -Force | Out-Null
  New-ItemProperty $p -Name 'SystemDefaultTlsVersions' -Type DWord -Value 1 -Force | Out-Null
}

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'DisabledByDefault' -Type DWord -Value 0 -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'Enabled' -Type DWord -Value 1 -Force | Out-Null

$mask = 0x00000A00
New-Item 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null
New-Item 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null

# === 2
$certDir  = 'C:\jenkins'
$certFile = Join-Path $certDir 'rec_ca.crt'
New-Item $certDir -ItemType Directory -Force | Out-Null

try {
  Invoke-WebRequest 'https://acme-proxy.nic.etu/' -OutFile $certFile -UseBasicParsing
} catch {
  Write-Warning 'HTTPS \u043a acme-proxy \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d, \u043f\u0440\u043e\u0431\u0443\u044e HTTP...'
  Invoke-WebRequest 'http://acme-proxy.nic.etu/' -OutFile $certFile -UseBasicParsing
}

# === 3
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).
  IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

try {
  if ($IsAdmin) {
    & certutil -addstore -f root $certFile | Out-Null
    $store = 'LocalMachine\Root'
  } else {
    & certutil -user -addstore -f root $certFile | Out-Null
    $store = 'CurrentUser\Root'
  }
  Write-Host "OK: CA \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 $store"
} catch {
  Write-Warning "\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442: $($_.Exception.Message)"
}

# === 4
$keys = @(
  'HKLM:\SOFTWARE\JavaSoft\Java Runtime Environment',
  'HKLM:\SOFTWARE\JavaSoft\JRE',
  'HKLM:\SOFTWARE\JavaSoft\JDK',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\JRE',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\JDK'
)

$homes = @()
foreach ($k in $keys) {
  if (Test-Path $k) {
    $cv = (Get-ItemProperty -Path $k -ErrorAction SilentlyContinue).CurrentVersion
    if ($cv) {
      $sub = Join-Path $k $cv
      $jh = (Get-ItemProperty -Path $sub -ErrorAction SilentlyContinue).JavaHome
      if ($jh) { $homes += $jh }
    } else {
      $jh = (Get-ItemProperty -Path $k -ErrorAction SilentlyContinue).JavaHome
      if ($jh) { $homes += $jh }
    }
  }
}

$javaHome = ($homes | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1)
if (-not $javaHome) {
  Write-Warning "JavaHome \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u0440\u0435\u0435\u0441\u0442\u0440\u0435. \u041f\u0440\u043e\u0449\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Windows-ROOT (\u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0410)."
  return
}

$cacerts = @(
  (Join-Path $javaHome 'lib\security\cacerts'),
  (Join-Path $javaHome 'jre\lib\security\cacerts')
) | Where-Object { Test-Path $_ } | Select-Object -First 1

$keytool = @(
  (Join-Path $javaHome 'bin\keytool.exe'),
  (Get-Command keytool.exe -ErrorAction SilentlyContinue).Source
) | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1

if (-not $cacerts) { Write-Warning "cacerts \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043f\u043e\u0434 $javaHome"; return }
if (-not $keytool) { Write-Warning "keytool.exe \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d (\u043d\u0443\u0436\u0435\u043d JRE/JDK \u0441 keytool \u0432 bin)"; return }

$certFile = 'C:\jenkins\rec_ca.crt'
& $keytool -delete -alias rec_ca -keystore $cacerts -storepass changeit -noprompt 2>$null
& $keytool -importcert -noprompt -trustcacerts -alias rec_ca -file $certFile -keystore $cacerts -storepass changeit
Write-Host "OK: CA \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 Java truststore: $cacerts"


# === 5
try {
  $r = Invoke-WebRequest 'https://jenkins2.nic.etu/jnlpJars/agent.jar' -UseBasicParsing -Method Head -TimeoutSec 20
  Write-Host "HTTPS \u043a Jenkins OK (HTTP $($r.StatusCode))"
} catch {
  Write-Warning "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 HTTPS \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0430: $($_.Exception.Message)"
  Write-Warning "\u0414\u043b\u044f Win7 \u043f\u0440\u043e\u0432\u0435\u0440\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 KB3140245 \u0438 KB4474419; \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0430\u0432\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430."
}

$ErrorActionPreference='Stop'
[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12

$urls = 'https://acme-proxy.nic.etu/','https://jenkins2.nic.etu/jnlpJars/agent.jar'

foreach ($u in $urls) {
  $uri = [uri]$u
  $h = $uri.Host
  $p = if ($uri.Port -gt 0) { $uri.Port } else { 443 }

  Write-Host "`n=== $u ==="

  try {
    $r = Invoke-WebRequest -Uri $u -UseBasicParsing -Method Head -TimeoutSec 20
    Write-Host ("OK iwr: HTTP {0}" -f $r.StatusCode)
  } catch {
    Write-Warning ("iwr FAIL: {0}" -f $_.Exception.Message)
  }

  $tcp=$null; $ssl=$null
  try {
    $tcp = New-Object Net.Sockets.TcpClient($h,$p)
    $ssl = New-Object Net.Security.SslStream($tcp.GetStream(),$false,({$true}))
    $Tls12 = [Enum]::ToObject([System.Security.Authentication.SslProtocols],3072)  # TLS1.2
    $ssl.AuthenticateAsClient($h,$null,$Tls12,$false)

    Write-Host ("OK TLS12: {0} {1}/{2}" -f $ssl.SslProtocol,$ssl.CipherAlgorithm,$ssl.CipherStrength)

    $cert  = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $ssl.RemoteCertificate
    $chain = New-Object System.Security.Cryptography.X509Certificates.X509Chain
    $chain.ChainPolicy.RevocationMode = 'NoCheck'
    $ok = $chain.Build($cert)
    if ($ok) { Write-Host "Trust: OK" } else { Write-Warning "Trust: NOT TRUSTED" }
  } catch {
    Write-Warning ("TLS12 FAIL: {0}" -f $_.Exception.Message)
  } finally {
    if ($ssl) { $ssl.Dispose() }
    if ($tcp) { $tcp.Close() }
  }
}

$repo = 'https://git.nic.etu/products/vbma_00951-01'
$repoGit = if ($repo.ToLower().EndsWith('.git')) { $repo } else { $repo + '.git' }

Write-Host "`n=== git HEAD: $repoGit ==="
$git = (Get-Command git.exe -ErrorAction SilentlyContinue).Source
if (-not $git) {
  Write-Host "SKIP: git.exe \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d"
} else {
  $env:GIT_TERMINAL_PROMPT='0'
  $args = @('-c','http.sslbackend=schannel','ls-remote',$repoGit,'HEAD')
  $out = & $git @args 2>&1
  $code = $LASTEXITCODE

  if ($code -eq 0) {
    Write-Host "OK git: \u043f\u043e\u043b\u0443\u0447\u0435\u043d HEAD"
    $out | Select-String 'HEAD' | ForEach-Object { $_.ToString() } | Write-Host
  } else {
    if ($out -match 'SSL|certificate|schannel') {
      Write-Warning "git TLS FAIL: $out"
    } else {
      Write-Host "git TLS OK (\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0440\u0435\u043f\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0451\u043d):"
      $out | Write-Host
    }
  }
}

Write-Host "`nDONE"
