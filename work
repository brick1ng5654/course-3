# C:\jenkins\setup-ca.ps1
# === 0. Полезные флаги ===
$ErrorActionPreference = 'Stop'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).
  IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# === 1. Включаем TLS 1.2 (Win7/2008R2) ===
$dotnet = @(
 'HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319',
 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319'
)
foreach ($p in $dotnet) {
  New-Item $p -Force | Out-Null
  New-ItemProperty $p -Name 'SchUseStrongCrypto' -Type DWord -Value 1 -Force | Out-Null
  New-ItemProperty $p -Name 'SystemDefaultTlsVersions' -Type DWord -Value 1 -Force | Out-Null
}
# SChannel TLS 1.2 Client
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'DisabledByDefault' -Type DWord -Value 0 -Force | Out-Null
New-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client' -Name 'Enabled' -Type DWord -Value 1 -Force | Out-Null
# WinHTTP default secure protocols (TLS1.1+1.2) — требует KB3140245
$mask = 0x00000A00
New-Item 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null
New-Item 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Force | Out-Null
New-ItemProperty 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp' -Name 'DefaultSecureProtocols' -Type DWord -Value $mask -Force | Out-Null

# === 2. Скачиваем корневой CA в C:\jenkins ===
$certDir  = 'C:\jenkins'
$certFile = Join-Path $certDir 'rec_ca.crt'
New-Item $certDir -ItemType Directory -Force | Out-Null

try {
  Invoke-WebRequest 'https://acme-proxy.nic.etu/' -OutFile $certFile -UseBasicParsing
} catch {
  Write-Warning 'HTTPS к acme-proxy не доступен, пробую HTTP...'
  Invoke-WebRequest 'http://acme-proxy.nic.etu/' -OutFile $certFile -UseBasicParsing
}

# === 3. Импорт в доверенные корни (через certutil на Win7) ===
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).
  IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

try {
  if ($IsAdmin) {
    & certutil -addstore -f root $certFile | Out-Null
    $store = 'LocalMachine\Root'
  } else {
    & certutil -user -addstore -f root $certFile | Out-Null
    $store = 'CurrentUser\Root'
  }
  Write-Host "OK: CA установлен в $store"
} catch {
  Write-Warning "Не удалось добавить сертификат: $($_.Exception.Message)"
}

# === 4. (Опционально) Импорт в Java truststore (реальный java.home) ===
# === Найдём JavaHome в реестре (Oracle JRE/JDK, 32/64) ===
$keys = @(
  'HKLM:\SOFTWARE\JavaSoft\Java Runtime Environment',
  'HKLM:\SOFTWARE\JavaSoft\JRE',
  'HKLM:\SOFTWARE\JavaSoft\JDK',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\JRE',
  'HKLM:\SOFTWARE\WOW6432Node\JavaSoft\JDK'
)

$homes = @()
foreach ($k in $keys) {
  if (Test-Path $k) {
    $cv = (Get-ItemProperty -Path $k -ErrorAction SilentlyContinue).CurrentVersion
    if ($cv) {
      $sub = Join-Path $k $cv
      $jh = (Get-ItemProperty -Path $sub -ErrorAction SilentlyContinue).JavaHome
      if ($jh) { $homes += $jh }
    } else {
      $jh = (Get-ItemProperty -Path $k -ErrorAction SilentlyContinue).JavaHome
      if ($jh) { $homes += $jh }
    }
  }
}

$javaHome = ($homes | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1)
if (-not $javaHome) {
  Write-Warning "JavaHome не найден в реестре. Проще использовать Windows-ROOT (вариант А)."
  return
}

# === Поищем cacerts и keytool ===
$cacerts = @(
  (Join-Path $javaHome 'lib\security\cacerts'),
  (Join-Path $javaHome 'jre\lib\security\cacerts')
) | Where-Object { Test-Path $_ } | Select-Object -First 1

$keytool = @(
  (Join-Path $javaHome 'bin\keytool.exe'),
  (Get-Command keytool.exe -ErrorAction SilentlyContinue).Source
) | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1

if (-not $cacerts) { Write-Warning "cacerts не найден под $javaHome"; return }
if (-not $keytool) { Write-Warning "keytool.exe не найден (нужен JRE/JDK с keytool в bin)"; return }

# === Импорт сертификата в cacerts ===
$certFile = 'C:\jenkins\rec_ca.crt'
& $keytool -delete -alias rec_ca -keystore $cacerts -storepass changeit -noprompt 2>$null
& $keytool -importcert -noprompt -trustcacerts -alias rec_ca -file $certFile -keystore $cacerts -storepass changeit
Write-Host "OK: CA добавлен в Java truststore: $cacerts"


# === 5. Быстрая проверка HTTPS к Jenkins ===
try {
  $r = Invoke-WebRequest 'https://jenkins2.nic.etu/jnlpJars/agent.jar' -UseBasicParsing -Method Head -TimeoutSec 20
  Write-Host "HTTPS к Jenkins OK (HTTP $($r.StatusCode))"
} catch {
  Write-Warning "Проверка HTTPS не прошла: $($_.Exception.Message)"
  Write-Warning "Для Win7 проверь наличие KB3140245 и KB4474419; после правок может потребоваться перезагрузка."
}
